name: 部署到 Cloudflare

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy-backend:
    name: 部署后端到 Cloudflare Workers
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: 安装依赖
      run: npm ci

    - name: 类型检查
      run: npm run type-check

    - name: 构建项目
      run: npm run build

    - name: 部署到 Cloudflare Workers
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        workingDirectory: backend
        command: deploy
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}

  deploy-frontend:
    name: 部署前端到 Cloudflare Pages
    runs-on: ubuntu-latest
    needs: deploy-backend
    defaults:
      run:
        working-directory: frontend
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 安装依赖
      run: npm ci

    - name: 类型检查
      run: npm run type-check

    - name: 构建项目
      run: npm run build
      env:
        NEXT_PUBLIC_GRAPHQL_ENDPOINT: ${{ secrets.CLOUDFLARE_WORKERS_URL }}/graphql

    - name: 部署到 Cloudflare Pages
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: weather-mastra-ai-agent
        directory: frontend/dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  health-check:
    name: 健康检查
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    
    steps:
    - name: 检查后端服务
      run: |
        curl -f ${{ secrets.CLOUDFLARE_WORKERS_URL }}/health || exit 1
        echo "✅ 后端服务正常"

    - name: 检查前端服务
      run: |
        curl -f ${{ secrets.CLOUDFLARE_PAGES_URL }} || exit 1
        echo "✅ 前端服务正常"

    - name: 检查 GraphQL API
      run: |
        curl -X POST \
          -H "Content-Type: application/json" \
          -d '{"query":"query { health }"}' \
          ${{ secrets.CLOUDFLARE_WORKERS_URL }}/graphql || exit 1
        echo "✅ GraphQL API 正常"

  notify:
    name: 部署通知
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, health-check]
    if: always()
    
    steps:
    - name: 发送成功通知
      if: needs.health-check.result == 'success'
      run: |
        echo "🎉 部署成功！"
        echo "🔗 前端地址: ${{ secrets.CLOUDFLARE_PAGES_URL }}"
        echo "🔗 API地址: ${{ secrets.CLOUDFLARE_WORKERS_URL }}"

    - name: 发送失败通知
      if: needs.health-check.result == 'failure'
      run: |
        echo "❌ 部署失败！请检查日志。"
        exit 1
